{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: Full node entity.
 *   - id: The node ID.
 *   - bundle: The type of the node, for example, "page" or "article".
 *   - authorid: The user ID of the node author.
 *   - createdtime: Time the node was published formatted in Unix timestamp.
 *   - changedtime: Time the node was changed formatted in Unix timestamp.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set supporting_attributes = create_attribute() %}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{%
  set content_classes = [
    'flow-root',
    'text-formatted',
    'node__content',
  ]
%}
{%
  set title_classes = [
    'mt-0',
    'text-ubc-blue-sea',
  ]
%}
{%
  set supporting_classes = [
    'py-8',
    'sm--float-right',
    'sm--pl-8',
    'sm--pt-0',
    'sm--max-w-xs',
  ]
%}

{% if endvalue > startvalue %}
  {% set eventdate = startday ~ ' - ' ~ endday ~ ', ' ~ endyear %}
  {% set time = '' %}
{% endif %}
{% if endvalue == startvalue %}
  {% set eventdate = startday ~ ', ' ~ endyear %}
  {% set time = ', ' ~ starttime ~ ' to ' ~ endtime %}
{% endif %}
{% if endvalue is not defined or endvalue is null  %}
  {% set eventdate = startday ~ ', ' ~ startyear %}
  {% set time = ', ' ~ starttime %}
{% endif %}
{% if node.field_event_is_ongoing.value  %}
  {% set eventdate = 'Ongoing event' %}
  {% set time = '' %}
{% endif %}

<article{{ attributes.addClass(classes) }}>
  <div{{ content_attributes.addClass(content_classes) }}>
    {% if not node.isPublished() %}
      <div class="unpublished">Unpublished</div>
    {% endif %}
    {% if not (node.field_event_category.isEmpty == true) and content.field_event_category is defined %}
      <p class="text-sm text-grey-700">{{ content.field_event_category.0 }}</p>
    {% endif %}
    {{ title_prefix }}
      <h1{{ title_attributes.addClass(title_classes) }}>
        {{ label }}
      </h1>
    {{ title_suffix }}
    {% if not (node.field_event_date.isEmpty == true) and content.field_event_date is defined %}
      <h2 class="mt-0 font-sans font-normal h4">{{ eventdate }}{{ time }}</h2>
    {% endif %}
     {% if not (node.field_event_location.isEmpty == true) and content.field_event_location is defined %}
      <div class="mt-2 text-sm text-grey-700">
        {{ content.field_event_location.0.address_line1 }}
      </div>
      {% endif %}
      {% if not (node.field_event_supporting.isEmpty == true) and content.field_event_supporting is defined %}
      <div{{ supporting_attributes.addClass(supporting_classes) }}>
        {{ content.field_event_supporting.0 }}
      </div>
    {% endif %}
    {{ content|without('field_event_date', 'field_event_link', 'field_event_location', 'links', 'field_event_tags', 'field_event_category', 'field_event_supporting') }}
    {% if not (node.field_event_link.isEmpty == true) and content.field_event_link is defined %}
    <p>
      <a href="{{ content.field_event_link[0]['#url'] }}" class="unit-button">{{ content.field_event_link[0]['#title'] }}</a>
    </p>
    {% endif %}
  </div>
  <hr class="styled-hr">
  <div class="flex flex-wrap mt-4 tags">
    {{ content.field_event_category }} {{ content.field_event_tags }}
  </div>
</article>
